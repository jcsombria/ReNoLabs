<div id="app" class="d-flex flex-column align-content-start container-fluid mx-auto">
  <router-view></router-view>
</div>

<script type="module">
  // 1. Define route components.
  // These can be imported from other files
  import User from './components/users.js'
  import Controller from './components/controller.js'
  import Courses from './components/courses.js'
  import CourseEditor from './components/course_editor.js'
  import Views from './components/views.js'
  import Activities from './components/activities.js'

  const Home = { template: `
<div class="select">
  <div class="select-block mb-3"> 
    <h1>Actividades</h1>
    <p align="center">
      <router-link to="/activity">
        <i class="bi bi-tools" style="font-size: 5rem;"></i>
      </router-link>
    </p>
  </div>
  <div class="select-block mb-3"> 
    <h1>Vista</h1>
    <p align="center">
      <router-link to="/view">
        <i class="bi bi-tv" style="font-size: 5rem;"></i>
      </router-link>
    </p>
  </div> 
  <div class="select-block mb-3"> 
    <h1>Controlador</h1>
    <p align="center">
      <router-link to="/controller">
        <i class="bi bi-cpu" style="font-size: 5rem;"></i>
      </router-link>
    </p>
  </div> 
  <div class="select-block mb-3"> 
    <h1>Usuarios</h1>
    <p align="center">
      <router-link to="/users">
        <i class="bi bi-people" style="font-size: 5rem;"></i>
      </router-link>
    </p>
  </div>
  <div class="select-block mb-3"> 
    <h1>Cursos</h1>
    <p align="center">
      <router-link to="/courses">
        <i class="bi bi-wrench" style="font-size: 5rem;"></i>
      </router-link>
    </p>
  </div> 
</div>
    `
  }

  const Activity = {
    template: `
<div class="container d-flex flex-column overflow-scroll">
  <div class="container-fluid d-flex">
    <div class="container d-flex flex-column">
      <label for="users_allowed">Usuarios con acceso a la actividad:</label>
      <select class="form-select" multiple size="20" name="users_allowed" id="users_allowed">
        <option v-for="u in usersAllowed" :key="u.username" value="u.username">{{ u.displayName }}</option>
      </select>
    </div>

    <div class="d-flex flex-column justify-content-center">
      <button class="btn"><i @click="addUsers()" class="bi bi-arrow-left-circle"></i></button>
      <button class="btn"><i @click="removeUsers()" class="bi bi-arrow-right-circle"></i></button>
    </div>

    <div class="container d-flex flex-column">
      <label for="users_not_allowed">Usuarios sin acceso a la actividad:</label>
      <select class="form-select" multiple size="20" name="users_not_allowed" id="users_not_allowed">
        <option v-for="u in usersNotAllowed" :key="u.username" value="u.username">{{ u.displayName }}</option>
      </select>
    </div>
  </div>
</div>
    `,

    data() {
      return {
        usersAllowed: [],
        usersNotAllowed: []
      }
    },

    methods: {
      reload() {
        let model = 'user';
        let query = {
          include: 'activity',
        };
        post(`/admin/q/${model}/get`,
          JSON.stringify(query),
          result => { this.usersNotAllowed = result; },
          error => {
            showMessage(`Cannot load users from server.`, 'modalGenericMessage');
          }
        )
      },

      addUsers(users) {
        console.log('aaa')
      },

      removeUsers(users) {
        console.log('dddd')
      }
    },

    mounted() {
      this.reload();
    }
  }


  // 2. Define some routes
  // Each route should map to a component.
  // We'll talk about nested routes later.
  const routes = [
    { path: '/', component: Home },
    { path: '/activity', component: Activities },
    { path: '/activity/:name', component: Activity },
    { path: '/view', component: Views },
    { path: '/controller', component: Controller },
    { path: '/users', component: User },
    { path: '/courses', component: Courses },
    { path: '/courses/edit', component: CourseEditor },
  ]

  // 3. Create the router instance and pass the `routes` option
  // You can pass in additional options here, but let's
  // keep it simple for now.
  const router = VueRouter.createRouter({
    // 4. Provide the history implementation to use. We are using the hash history for simplicity here.
    history: VueRouter.createWebHashHistory(),
    routes, // short for `routes: routes`
  })

  // 5. Create and mount the root instance.
  const app = Vue.createApp({})
  // Make sure to _use_ the router instance to make the
  // whole app router-aware.
  app.use(router)
  app.mount('#app')
// Now the app has started!
</script>