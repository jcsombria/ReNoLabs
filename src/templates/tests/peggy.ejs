<!DOCTYPE html>
<html>
	<head>
		<%- include('../ui/header', { csrfToken: '' }  ); %>
    <script src="https://pagecdn.io/lib/ace/1.4.12/ace.js" type="text/javascript" charset="utf-8"></script>        
	</head>
	<body>
    <div class="container-fluid d-flex">
      <div class="editor w-100" id="editor" style="min-height: 400pt;"></div>
      <div class="container" id="editor-log"><textarea class="w-100 h-100" id="logger"></textarea></div>
    </div>
    <div class="container d-flex">
      <button class="btn btn-primary m-1" id="run" onclick="play()"><i class="bi bi-play"></i></button>
      <button class="btn btn-secondary m-1" id="step" onclick="step()"><i class="bi bi-pause"></i></button>
      <button class="btn btn-secondary m-1" id="stop" onclick="stop()"><i class="bi bi-stop"></i></button>
      <button class="btn btn-secondary m-1" id="load" onclick="load()"><i class="bi bi-cloud-download"></i></button>
      <button class="btn btn-secondary m-1" id="save" onclick="save()"><i class="bi bi-cloud-upload"></i></button>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/peggy"></script>
    <script>
      var editor = ace.edit('editor');
      editor.setTheme("ace/theme/monokai");
      editor.session.setMode("ace/mode/javascript");
      editor.setValue(`A = [3.8, 3, 3, 3]
MOV [2, 2, 2, 2]
MOV A
A = [3.8, 38, 3, 3]
MOV A
MOV B
IF ( A == B ) {
  MOV B
}`);
      var grammar = `
        { function makeNumber(sign, integer, decimal) {
            var number =  ((sign != null) ? sign : '') 
                        + ((integer != null) ? integer.join('') : '')
                        + ((decimal != null) ? decimal.join('') : '');
            return Number.parseFloat(number);
          } 
        }
        instruction_list
          = _* head:instruction tail:(_* @instruction _*)* { return [head, ...tail]; }

        begin_point     = '['
        end_point       = ']'
        begin_condition = '('
        end_condition   = ')'
        begin_body      = '{'
        end_body        = '}'
        operator        = '<' / '<=' / '>' / '>=' / '=='


        instruction
          =
            I:assignment /
            I:instr_0op { return [I]; } /
            I:instr_1op _ A:operand { return [I, A]; } /
            I:instr_2op _ A:operand _ B:operand { return [I, A, B]; } /
            I:if

         _ 'whitespace'
          = [ \\t\\n\\r]+

        assignment
          = A:identifier _* '=' _* B:point _* {return ['=', A, B]}

        identifier
          = [A-Z]

        point
          = begin_point _* X:number _* ',' _* Y:number _* ',' _* Z:number _* ',' _* R:number _* end_point { return [X,Y,Z,R]; }

        instr_0op
          = 'open'i / 'close'i

        instr_1op
          = 'mov'i

        instr_2op
          = 'add'i

        if
          = 'IF' _* begin_condition _* condition _* end_condition _* begin_body _* instruction_list _* end_body 

        condition
          = operand _* operator _* operand

        operand
          = identifier / point

        for
          = 'FOR' _* begin_condition _* condition _* end_condition _* begin_body _* instruction_list _* end_body 

        number
          = sign:([+-]?)integer:('0' / [1-9][0-9]*)decimal:(\.[0-9]+)? { return makeNumber(sign, integer, decimal); }
      `;
      var parser = peggy.generate(grammar);

      function play() {
        var interpreter = new Interpreter();
        var input = editor.getValue();
        var logger = $("#logger")[0];
        var result;
        try {
          result = parser.parse(input);
          result.forEach(element => {
            logger.value += element + '\n';
          });
          interpreter.execute(result);
        } catch(e) {
          logger.value += e;
        } finally {
          logger.value += '\n---\n';
        }
      };

      function step() {};
      function stop() {};
      function load() {};
      function save() {};

      class Interpreter {
        constructor() {
          this.output = [];
          this.state = {};
          this.error = [];
        }

        mov(point) {
          console.log('Moving to ' + point);
        }

        execute(code) {
          code.forEach(i => {
            switch(i[0]) {
              case '=':
                this.state[i[1]] = i[2];
                break;
              case 'MOV':
                var point;
                if (typeof i[1] == 'string') {
                  var point = this.state[i[1]];
                  if (!point) {
                    console.error('Unknown identifier: ' + i[1]);
                    return;
                  }
                } else {
                  point = i[1];
                }
                this.mov(point);
                break;
            }
          });
        };

      }
  </script>

  </body>
</html>